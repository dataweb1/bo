<?php
\Drupal::moduleHandler()->loadInclude('bo', 'inc', 'templates/inc/theme');
\Drupal::moduleHandler()->loadInclude('bo', 'theme', 'templates/inc/views_view_fields');

use Drupal\Component\Serialization\Json;
use Drupal\Core\Form\FormStateInterface;
use Drupal\image\Entity\ImageStyle;

/**
 * Implements hook_rebuild().
 */
function bo_install() {
  /** @var \Drupal\bo\Service\BoSettings $boSettings */
  $boSettings = \Drupal::getContainer()->get('bo.settings');

  // Build image styles.
  foreach ($boSettings->getStyles() as $label => $style) {
    $imageStyle = ImageStyle::load("bo_" . $style["size"]);
    if (!$imageStyle) {
      $imageStyle = ImageStyle::create([
        'name' => 'bo_' . $style["size"],
        'label' => $label,
      ]);
      $imageStyle->save();

      $imageStyle->addImageEffect([
        'id' => 'image_scale',
        'weight' => 0,
        'data' => [
          'width' => $style["width"],
        ],
      ]);
      $imageStyle->save();
    }
  }
}

/**
 * Implements hook_theme().
 */
function bo_theme() {
  /** @var \Drupal\bo\Service\BoSettings $boSettings */
  $boSettings = \Drupal::getContainer()->get('bo.settings');

  $templates = [];

  $theme = \Drupal::theme()->getActiveTheme();

  /** @var \Drupal\bo\Service\BoView $boView */
  $boView = \Drupal::getContainer()->get('bo.view');
  $bo_views = $boView->getBoViews();
  foreach($bo_views as $view_id => $view) {
    foreach ($view as $display) {
      add_views_view_bo_suggestion_to_templates([
        $view_id,
        $display["display_id"]
      ], $theme, $templates);
      add_views_view_unformatted_bo_suggestion_to_templates([
        $view_id,
        $display["display_id"]
      ], $theme, $templates);
    }
  }

  $bundles = $boSettings->getBoBundles();
  foreach($bundles as $bundle) {
    add_views_view_field_bo_suggestion_to_templates($bundle["machine_name"], $theme, $templates);
  }

  $templates["views_view_bo_bootstrap_grid"] = [
    'file' => 'inc/views_view_bo_bootstrap_grid.theme',
    'preprocess functions' => [
      'template_preprocess_views_view_bo_bootstrap_grid',
      // From views_bootstrap module.
      'template_preprocess_views_bootstrap_grid',
      'template_preprocess_views_view_grid',
    ],
  ];

  $templates["bo_add_multi_item_list"] = [
    'variables' => [
      "title" => NULL,
      "items" => NULL,
      "empty" => NULL,
      "wrapper_attributes" => NULL,
      "context" => [
        "cancel_button" => NULL
      ],
    ],
  ];

  $templates["bo_header_operations_item_list"] = [
    'variables' => [
      "items" => NULL,
      "empty" => NULL,
      "wrapper_attributes" => NULL,
      "context" => NULL
    ],
  ];

  $templates["bo_entity_operations_item_list"] = [
    'variables' => [
      "items" => NULL,
      "empty" => NULL,
      "wrapper_attributes" => NULL,
      "context" => NULL
    ],
  ];

  $templates["bo_content_operations_item_list"] = [
    'variables' => [
      "items" => NULL,
      "empty" => NULL,
      "wrapper_attributes" => NULL,
      "context" => NULL
    ],
  ];

  return $templates;
}

/**
 * Implements hook_theme_registry_alter().
 */

function bo_theme_registry_alter(&$theme_registry) {
  $theme_registry["views_view_fields"]["template"] = "views-view-fields-bo";
  $theme_registry["views_view_fields"]["path"] = \Drupal::service('module_handler')->getModule('bo')->getPath()."/templates";
}


/**
 * Implements hook_theme_suggestions_alter().
 */

function bo_theme_suggestions_alter(array &$suggestions, array $variables, $hook) {

  if (isset($variables['view'])) {
    $view = $variables['view'];

    //$display_id = $view->id()."-".$view->current_display;
    if ($view->getBaseEntityType()) {
      $class = $view->getBaseEntityType()->getClass();
    }

    if ($class == "Drupal\bo\Entity\BoEntity") {

      if ($hook == "views_view") {
        $suggestions[] = 'views_view_bo';
        $suggestions[] = sprintf('views_view_bo__%s', $variables['view']->id());
        $suggestions[] = sprintf('views_view_bo__%1$s__%2$s', $variables['view']->id(), $variables['view']->current_display);
      }

      if ($hook == "views_view_unformatted") {
        $suggestions[] = 'views_view_unformatted_bo';
        $suggestions[] = sprintf('views_view_unformatted_bo__%s', $variables['view']->id());
        $suggestions[] = sprintf('views_view_unformatted_bo__%1$s__%2$s', $variables['view']->id(), $variables['view']->current_display);
      }

      if ($hook === 'views_view_fields') {
        $suggestions[] = 'views_view_fields_bo';
      }

      if ($hook === 'views_view_field') {

        if ($variables["field"]->field == "bo_fields") {
          $bundle = $variables['row']->_entity->getBundle();
          $suggestions[] = $hook . '_bo__bo_fields';
          $suggestions[] = $hook . '_bo__' . $bundle;
        }

      }

    }
  }
}

/**
 * Implements hook_preprocess_html().
 */
function bo_preprocess_html(&$variables) {
  $variables['#attached']['library'][] =  'bo/bo';
}

/**
 * Implements hook_preprocess_page().
 */
function bo_preprocess_page(&$variables) {
  if (!\Drupal::service('router.admin_context')->isAdminRoute()) {
    /** @var \Drupal\bo\Service\BoSettings $boSettings */
    $boSettings = \Drupal::getContainer()->get('bo.settings');
    if ($boSettings->getBoSetting("load_bootstrap")) {
      $variables['#attached']['library'][] = 'bo/bo_bootstrap';
    }
  }
}

/**
 * Implements hook_preprocess_page_title().
 */
function bo_preprocess_page_title(&$variables) {
  if (isset($_GET["title"]) && $_GET["title"]) {
    $variables["title"] = $_GET["title"];
  }
}


/**
 * Implements hook_form_alter().
 */
function bo_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $current_uri = \Drupal::request()->getRequestUri();
  if (strpos($current_uri, "translations/add") !== false) {
    $form["actions"]["submit"]["#submit"][] = "_add_translation_submit";

    /** @var \Drupal\bo\Service\BoSettings $boSettings */
    $boSettings = \Drupal::getContainer()->get('bo.settings');
    if ($boSettings->getBoSetting("google_translate_enabled")) {
      $form['google_translate'] = [
        '#type' => 'checkbox',
        '#title' => t('Translate BO textual content via Google Translate'),
        '#default_value' => true,
        '#weight' => 110,
        '#group' => "footer",
      ];
    }
  }
}

/**
 * Implements hook_entity_translation_delete().
 */
function bo_entity_translation_delete(Drupal\Core\Entity\EntityInterface $translation) {
  $langcode = $translation->language()->getId();
  $entity_type = $translation->getEntityType()->id();
  $to_path = "/".str_replace("_", "/", $entity_type)."/".$translation->id();

  /** @var \Drupal\bo\Service\BoEntity $boEntity */
  $boEntity = \Drupal::service('bo.entity');
  $boEntity->deleteAllEntitiesWithPath($langcode, $to_path);
}


/**
 * Implements hook_entity_delete().
 */
function bo_entity_delete(Drupal\Core\Entity\EntityInterface $entity) {
  $langcode = $entity->language()->getId();
  $entity_type = $entity->getEntityType()->id();
  $to_path = "/" . str_replace("_", "/", $entity_type) . "/" . $entity->id();

  /** @var \Drupal\bo\Service\BoEntity $boEntity */
  $boEntity = \Drupal::service('bo.entity');
  $boEntity->deleteAllEntitiesWithPath($langcode, $to_path);
}

/**
 * Implements hook_views_data_alter().
 */
function bo_views_data_alter(array &$data) {

  $data['bo']['bo_current_display_id_filter'] = [
    'title' => t('Current Display ID'),
    'filter' => [
      //'table' => 'bo',
      'title' => t('Current Display ID'),
      'field' => 'display_id',
      'id' => 'bo_current_display_id'
    ],
  ];

  $data['bo']['bo_current_collection_id_filter'] = [
    'title' => t('Current Collection ID'),
    'filter' => [
      //'table' => 'bo',
      'title' => t('Current Collection ID'),
      'field' => 'collection_id',
      'id' => 'bo_current_collection_id'
    ],
  ];

  $data['bo']['bo_current_collection_argument'] = [
    'group' => '',
    'title' => t('Current Collection ID'),
    'title short' => t('Current Collection ID'),
    'help' => '',
    // We override the argument. This is where we do our tricks!
    'argument' => [
      'table' => 'bo',
      'field' => 'collection_id',
      'id' => 'bo_current_collection_id',
      'zero is null' => TRUE,
    ],
  ];

  $data['bo']['bo_current_path_argument'] = [
    'group' => '',
    'title' => t('Current Path'),
    'title short' => t('Current Path'),
    'help' => '',
    // We override the argument. This is where we do our tricks!
    'argument' => [
      'table' => 'bo',
      'field' => 'to_path',
      'id' => 'bo_current_path',
      'zero is null' => TRUE,
    ],
  ];

  $data['bo']['bo_fields'] = [
    'title' => 'BO '.t('Fields'),
    'field' =>[
      'title' => 'BO '.t('Fields'),
      'help' => t('Render the BO fields via specific twig template'),
      'id' => 'bo_fields',
    ],
  ];

  unset($data['bo']['operations']);
  $data['bo']['bo_operations'] = [
    'title' => 'BO '.t('Operations links'),
    'field' => [
      'title' => 'BO '.t('Operations links'),
      'help' => t('Provides links to perform BoEntity operations in popup.'),
      'id' => 'bo_operations',
    ],
  ];

  $data['bo']['bo_header'] = [
    'title' => 'BO '.t('Header operations'),
    'help' => t('Provides header operation links for the BO overview.'),
    'area' => [
      'id' => 'bo_header',
    ],
  ];

}


/**
 * Implements hook_block_view_alter().
 */
function bo_block_view_alter(array &$build, \Drupal\Core\Block\BlockPluginInterface $block){
  $_SESSION["current_block_id"] = $build["#block"]->id();
}

/**
 * Implements hook_link_alter().
 */
function bo_link_alter(&$variables) {
  /** @var \Drupal\Core\Url $url */
  $url = $variables['url'];

  if (!$url->isRouted()) {
    return;
  }

  $routeName = $url->getRouteName();

  $toModalRoutes = [
    'bo.collection_settings_form',
    'entity.bo.edit_form',
    'entity.bo.add_form',
    'entity.bo.insert_form',
    'entity.bo.delete_form',
    'bo.multi',
    'bo.reorder',
    'bo.reset_collection_options_form',
    'bo.help',
  ];

  if (!in_array($routeName, $toModalRoutes)) {
    return;
  }

  $dialogWidth = '1000';
  $dialogHeight = 'auto';
  $dialogMaxWidth = '80%';

  $variables['options']['attributes']['class'][] = 'use-ajax';
  $variables['options']['attributes']['data-dialog-type'] = 'dialog';
  $variables['options']['attributes']['data-dialog-options'] = Json::encode([
    'width' => $dialogWidth,
    'maxWith' => $dialogMaxWidth,
    'height' => $dialogHeight,
    'modal' => TRUE,
    'dialogClass' => 'bo-dialog',
  ]);
}

/**
 * @param $form
 * @param FormStateInterface $formState
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function _add_translation_submit($form, FormStateInterface $formState) {
  $google_translate = (bool)$formState->getValue("google_translate");
  if ($google_translate == true) {
    $from_langcode = $formState->getValue("source_langcode")["source"];
    if ($from_langcode == "") {
      $from_langcode = $formState->getValue("to_path")[0]["langcode"];
    }
    $to_langcode = $formState->getValue("langcode")[0]["value"];
    $to_path = $formState->getBuildInfo()['callback_object']->getEntity()->toArray()["to_path"][0]["source"];

    /** @var \Drupal\bo\Service\BoTranslate $boTranslate */
    $boTranslate = \Drupal::service('bo.translate');
    $boTranslate->translatePathContent($from_langcode, $to_langcode, $to_path);
  }
}
