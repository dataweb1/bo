<?php
\Drupal::moduleHandler()->loadInclude('bo', 'inc', 'inc/helper_functions');
\Drupal::moduleHandler()->loadInclude('bo', 'inc', 'templates/inc/theme');
\Drupal::moduleHandler()->loadInclude('bo', 'theme', 'templates/inc/views_view_bo');
\Drupal::moduleHandler()->loadInclude('bo', 'theme', 'templates/inc/views_view_unformatted_bo');
\Drupal::moduleHandler()->loadInclude('bo', 'theme', 'templates/inc/views_view_fields');
\Drupal::moduleHandler()->loadInclude('bo', 'theme', 'templates/inc/views_view_field_bo__bo_fields');

use Drupal\bo\Enum\BoBundleType;
use Drupal\Component\Serialization\Json;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\image\Entity\ImageStyle;

/**
 * Implements hook_install().
 */
function bo_install() {
  /** @var \Drupal\bo\Service\BoSettings $boSettings */
  $boSettings = \Drupal::getContainer()->get('bo.settings');
  $boSettings->loadInstallSettings();

  // Build image styles.
  foreach ($boSettings->getStyles() as $label => $style) {
    $imageStyle = ImageStyle::load("bo_" . $style["size"]);
    if (!$imageStyle) {
      $imageStyle = ImageStyle::create([
        'name' => 'bo_' . $style["size"],
        'label' => $label,
      ]);
      $imageStyle->save();

      $imageStyle->addImageEffect([
        'id' => 'image_scale',
        'weight' => 0,
        'data' => [
          'width' => $style["width"],
        ],
      ]);
      $imageStyle->save();
    }
  }
}

/**
 * Implements hook_theme().
 */
function bo_theme() {
  $templates = [];

  $theme = \Drupal::theme()->getActiveTheme();

  /** @var \Drupal\bo\Service\BoBundle $boBundle */
  $boBundle = \Drupal::getContainer()->get('bo.bundle');
  $bundles = $boBundle->getBundles();

  /** @var \Drupal\bo\Service\BoCollection $boCollection */
  $boCollection = \Drupal::getContainer()->get('bo.collection');
  $bo_views = $boCollection->getBoViews();
  foreach($bo_views as $view_id => $view) {
    foreach ($view as $display) {
      add_views_view_bo_suggestion_to_templates([
        $view_id,
        $display["display_id"]
      ], $theme, $templates);
      add_views_view_unformatted_bo_suggestion_to_templates([
        $view_id,
        $display["display_id"]
      ], $theme, $templates);

      /** @var \Drupal\bo\Entity\BoBundle $bundle */
      foreach($bundles as $bundle) {
        if ($bundle->getCollectionOptions()['specific_view'] == $view_id . '__' . $display['display_id']) {
          add_views_view_unformatted_bo_suggestion_to_templates([
            $view_id,
            $display["display_id"],
            $bundle->id(),
          ], $theme, $templates);
        }
      }
    }
  }

  foreach($bundles as $bundle) {
    add_views_view_field_bo_suggestion_to_templates($bundle->id(), $theme, $templates);
  }

  $templates["views_view_bo_bootstrap_grid"] = [
    'file' => 'templates/inc/views_view_bo_bootstrap_grid.theme',
    'preprocess functions' => [
      'template_preprocess_views_view_bo_bootstrap_grid',
      // From views_bootstrap module.
      'template_preprocess_views_bootstrap_grid',
      'template_preprocess_views_view_grid',
    ],
  ];

  $templates["bo_add_multi_item_list"] = [
    'variables' => [
      "title" => NULL,
      "items" => NULL,
      "empty" => NULL,
      "wrapper_attributes" => NULL,
      'attributes' => NULL,
      "context" => [
        "cancel_button" => NULL
      ],
    ],
  ];

  $templates["bo_header_operations_item_list"] = [
    'variables' => [
      "items" => NULL,
      "empty" => NULL,
      "wrapper_attributes" => NULL,
      'attributes' => NULL,
      "context" => NULL,
      'label' => NULL,
    ],
  ];

  $templates["bo_entity_operations_item_list"] = [
    'variables' => [
      "items" => NULL,
      "empty" => NULL,
      "wrapper_attributes" => NULL,
      'attributes' => NULL,
      "context" => NULL,
      'label' => NULL,
    ],
  ];

  $templates["bo_insert_operations_item_list"] = [
    'variables' => [
      "items" => NULL,
      "empty" => NULL,
      "wrapper_attributes" => NULL,
      'attributes' => NULL,
      "context" => NULL,
      'label' => NULL,
    ],
  ];

  $templates["node_entity_operations_item_list"] = [
    'variables' => [
      "items" => NULL,
      "empty" => NULL,
      "wrapper_attributes" => NULL,
      'attributes' => NULL,
      "context" => NULL,
      'label' => NULL,
    ],
  ];

  $templates["node_area_operations_item_list"] = [
    'variables' => [
      "items" => NULL,
      "empty" => NULL,
      "wrapper_attributes" => NULL,
      'attributes' => NULL,
      "context" => NULL,
      'label' => NULL,
    ],
  ];

  $templates["node_entity_operations_block"] = [
    'variables' => [
      "items" => NULL,
      'attributes' => NULL,
      'list_class' => NULL,
      'label' => NULL,
    ],
  ];

  return $templates;
}

/**
 * Implements hook_theme_registry_alter().
 */

function bo_theme_registry_alter(&$theme_registry) {
  $theme_registry["views_view_fields"]["template"] = "views-view-fields-bo";
  $theme_registry["views_view_fields"]["path"] = \Drupal::service('module_handler')->getModule('bo')->getPath()."/templates";
}


/**
 * Implements hook_theme_suggestions_alter().
 */

function bo_theme_suggestions_alter(array &$suggestions, array $variables, $hook) {

  if (isset($variables['view'])) {
    $view = $variables['view'];

    if ($view->getBaseEntityType()) {
      $class = $view->getBaseEntityType()->getClass();
    }

    if ($class == "Drupal\bo\Entity\BoEntity") {

      if ($hook == "views_view") {
        $suggestions[] = 'views_view_bo';
        $suggestions[] = sprintf('views_view_bo__%s', $variables['view']->id());
        $suggestions[] = sprintf('views_view_bo__%1$s__%2$s', $variables['view']->id(), $variables['view']->current_display);
      }

      if ($hook == "views_view_unformatted") {
        $suggestions[] = 'views_view_unformatted_bo';
        $suggestions[] = sprintf('views_view_unformatted_bo__%s', $variables['view']->id());
        $suggestions[] = sprintf('views_view_unformatted_bo__%1$s__%2$s', $variables['view']->id(), $variables['view']->current_display);

        // Add collection bundle suggestion if collection argument is set for a specific view.
        if (isset($variables['view']->filter["bo_current_collection_id_filter"])) {
          $currentCollectionId = $variables['view']->filter["bo_current_collection_id_filter"]->value;

          /** @var \Drupal\bo\Service\BoCollection $boCollection */
          $boCollection = \Drupal::getContainer()->get('bo.collection');
          if ($bundle = $boCollection->getCollectionBundle($currentCollectionId)) {
            $suggestions[] = sprintf('views_view_unformatted_bo__%1$s__%2$s__%3$s', $variables['view']->id(), $variables['view']->current_display, $bundle->id());
          }
        }
      }

      if ($hook === 'views_view_fields') {
        $suggestions[] = 'views_view_fields_bo';
      }

      if ($hook === 'views_view_field') {

        if ($variables["field"]->field == "bo_fields") {
          $bundle = $variables['row']->_entity->getBundle();
          $suggestions[] = $hook . '_bo__bo_fields';
          $suggestions[] = $hook . '_bo__' . $bundle;
        }

        if ($variables["field"]->field == "bo_help") {
          $suggestions[] = $hook . '_bo__help';
        }

      }

    }
  }
}

/**
 * Implements hook_preprocess_html().
 */
function bo_preprocess_html(&$variables) {
  $variables['#attached']['library'][] =  'bo/bo';

  if (!\Drupal::service('router.admin_context')->isAdminRoute()) {
    /** @var \Drupal\bo\Service\BoSettings $boSettings */
    $boSettings = \Drupal::getContainer()->get('bo.settings');
    if ($boSettings->getSetting("load_bootstrap")) {
      $variables['#attached']['library'][] = 'bo/bo_bootstrap';
    }
  }
}

/**
 * Implements hook_preprocess_page_title().
 */
function bo_preprocess_page_title(&$variables) {
  if (isset($_GET["title"]) && $_GET["title"]) {
    $variables["title"] = $_GET["title"];
  }
}


/**
 * Implements hook_form_alter().
 */
function bo_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $route_name = \Drupal::routeMatch()->getRouteName();
  if ($route_name == 'entity.node.content_translation_add') {
    $form["actions"]["submit"]["#submit"][] = "_add_translation_submit";

    $from_langcode = \Drupal::routeMatch()->getParameter('source')->getId();
    $form['from_langcode'] = ['#type' => 'hidden', '#default_value' => $from_langcode];
    $to_langcode = \Drupal::routeMatch()->getParameter('target')->getId();
    $form['to_langcode'] = ['#type' => 'hidden', '#default_value' => $to_langcode];

    /** @var \Drupal\bo\Service\BoSettings $boSettings */
    $boSettings = \Drupal::getContainer()->get('bo.settings');
    if ($boSettings->getGoogleTranslateEnabled()) {
      $form['google_translate'] = [
        '#type' => 'checkbox',
        '#title' => t('Translate BO textual content via Google Translate'),
        '#default_value' => true,
        '#weight' => 110,
        '#group' => "footer",
      ];
    }
  }

  if (in_array($route_name, ['entity.bo.add_form', 'entity.bo.insert_form', 'entity.bo.edit_form'])) {

    foreach($form as &$element) {
      // If field has multiple values, transform field to fielset.
      if (array_key_exists('#cardinality', $element['widget']) && ($element['widget']['#cardinality'] == -1 || $element['widget']['#cardinality'] > 1)) {
        $element['#type'] = "fieldset";
        $element['#title'] = $element["widget"]['#title'];
        unset($element["widget"]['#title']);
      }

      // If link field, remove extensive description.
      if (isset($element['widget'][0]['uri'])) {
        foreach ($element['widget'] as $index => &$button) {
          if (is_int($index)) {
            $button['uri']['#description'] = '';
          }
        }
      }
    }

    $form['#after_build'][] = '_bo_entity_form_after_build';
  }

  $form['#after_build'][] = '_form_after_build';

}

/**
 * Implements hook_entity_translation_delete().
 */
function bo_entity_translation_delete(Drupal\Core\Entity\EntityInterface $translation) {
  $langcode = $translation->language()->getId();
  $entity_type = $translation->getEntityType()->id();
  $to_path = "/".str_replace("_", "/", $entity_type)."/".$translation->id();

  /** @var \Drupal\bo\Service\BoEntity $boEntity */
  $boEntity = \Drupal::service('bo.entity');
  $boEntity->deleteAllEntitiesWithPath($langcode, $to_path);
}


/**
 * Implements hook_entity_delete().
 */
function bo_entity_delete(Drupal\Core\Entity\EntityInterface $entity) {
  $langcode = $entity->language()->getId();
  $entity_type = $entity->getEntityType()->id();
  $to_path = "/" . str_replace("_", "/", $entity_type) . "/" . $entity->id();

  /** @var \Drupal\bo\Service\BoEntity $boEntity */
  $boEntity = \Drupal::service('bo.entity');
  $boEntity->deleteAllEntitiesWithPath($langcode, $to_path);
}

/**
 * Implements hook_views_data_alter().
 */
function bo_views_data_alter(array &$data) {

  $data['bo']['bo_current_collection_id_filter'] = [
    'title' => t('Current Collection ID'),
    'filter' => [
      //'table' => 'bo',
      'title' => t('Current Collection ID'),
      'field' => 'collection_id',
      'id' => 'bo_current_collection_id'
    ],
  ];

  $data['bo']['bo_current_collection_argument'] = [
    'group' => '',
    'title' => t('Current Collection ID'),
    'title short' => t('Current Collection ID'),
    'help' => '',
    // We override the argument. This is where we do our tricks!
    'argument' => [
      'table' => 'bo',
      'field' => 'collection_id',
      'id' => 'bo_current_collection_id',
      'zero is null' => TRUE,
    ],
  ];

  $data['bo']['bo_current_path_argument'] = [
    'group' => '',
    'title' => t('Current Path'),
    'title short' => t('Current Path'),
    'help' => '',
    // We override the argument. This is where we do our tricks!
    'argument' => [
      'table' => 'bo',
      'field' => 'to_path',
      'id' => 'bo_current_path',
      'zero is null' => TRUE,
    ],
  ];

  $data['bo']['bo_fields'] = [
    'title' => 'BO '.t('Fields'),
    'field' =>[
      'title' => 'BO '.t('Fields'),
      'help' => t('Render the BO fields via specific twig template'),
      'id' => 'bo_fields',
    ],
  ];

  unset($data['bo']['operations']);
  $data['bo']['bo_operations'] = [
    'title' => 'BO '.t('Operations links'),
    'field' => [
      'title' => 'BO '.t('Operations links'),
      'help' => t('Provides links to perform BoEntity operations in popup.'),
      'id' => 'bo_operations',
    ],
  ];

  $data['bo']['bo_header'] = [
    'title' => 'BO '.t('Header operations'),
    'help' => t('Provides header operation links for the BO overview.'),
    'area' => [
      'id' => 'bo_header',
    ],
  ];

  $data['node']['node_area_operations'] = [
    'title' => t('Node add link (BO style)'),
    'help' => t('Provides header/footer operation links for a view of nodes (E.g. add).'),
    'area' => [
      'id' => 'node_area_operations',
    ],
  ];

  $data['node']['node_entity_operations'] = [
    'title' => t('Node edit/delete link (BO style)'),
    'field' => [
      'title' => t('Node edit/delete link (BO style)'),
      'help' => t('Provides links to perform edit/delete node operations in popup.'),
      'id' => 'node_entity_operations',
    ],
  ];

}


/**
 * Implements hook_block_view_alter().
 */
function bo_block_view_alter(array &$build, \Drupal\Core\Block\BlockPluginInterface $block){
  $_SESSION["current_block_id"] = $build["#block"]->id();
}

/**
 * Implements hook_link_alter().
 */
function bo_link_alter(&$variables) {
  /** @var \Drupal\Core\Url $url */
  $url = $variables['url'];

  if (!$url->isRouted()) {
    return;
  }

  $dialogRoutes = [
    'bo.collection_settings_form' => [
      'use' => 'dialog',
      'width' => '1000',
    ],
    'entity.bo.edit_form' => [
      'use' => 'off_canvas',
      'width' => '40%',
    ],
    'entity.bo.add_form' => [
      'use' => 'off_canvas',
      'width' => '40%',
    ],
    'entity.bo.insert_form' => [
      'use' => 'off_canvas',
      'width' => '40%',
    ],
    'entity.bo.delete_form' => [
      'use' => 'dialog',
      'width' => '600',
    ],
    'bo.reset_collection_options_form' => [
      'use' => 'dialog',
      'width' => '600',
    ],
    'entity.node.edit_form' => [
      'use' => 'dialog',
      'width' => '900',
    ],
    'node.add' => [
      'use' => 'dialog',
      'width' => '900',
    ],
    'entity.node.delete_form' => [
      'use' => 'dialog',
      'width' => '600',
    ],
    'entity.node.content_translation_overview' => [
      'use' => 'dialog',
      'width' => '900',
    ],
    'entity.node.content_translation_add' => [
      'use' => 'dialog',
      'width' => '800',
    ],
    'bo.help' => [
      'use' => 'dialog',
      'width' => '60%',
    ],
  ];

  $routeName = $url->getRouteName();

  // If route is not to show in dialog or off-canvas, end the hook.
  if (!isset($dialogRoutes[$routeName])) {
    return;
  }

  // AJAXify it.
  $variables['options']['attributes']['class'][] = 'use-ajax';

  $dialog_options = [
    'width' =>  $dialogRoutes[$routeName]['width'],
    'height' => 'auto',
    'modal' => TRUE,
    'dialogClass' => 'bo-dialog',
  ];

  if (isset($url->getRouteParameters()['title'])) {
    $dialog_options['title'] = $url->getRouteParameters()['title'];
  }

  if ($dialogRoutes[$routeName]['use'] == 'off_canvas') {
    $variables['options']['attributes']['data-dialog-renderer'] = 'off_canvas';
  }
  $variables['options']['attributes']['data-dialog-type'] = 'dialog';
  $variables['options']['attributes']['data-dialog-options'] = Json::encode($dialog_options);

  $variables['#attached']['library'][] = 'core/drupal.dialog.ajax';
}


/**
 * Implements hook_css_alter().
 */
function bo_css_alter(&$css, \Drupal\Core\Asset\AttachedAssetsInterface $assets) {
  $front_theme_name = \Drupal::config('system.theme')->get('default');
  if (\Drupal::service('theme.manager')->getActiveTheme()->getName() == $front_theme_name) {
    // Remove all (stable9) off-canvas styling.
    foreach ($css as $key => $css_data) {
      if (str_contains($key, 'off-canvas')) {
        if (!in_array($key, [
          'off-canvas.css',
          'off-canvas.theme.css',
          'off-canvas.reset.css',
          'off-canvas.base.css',
          'off-canvas.motion.css',
          'off-canvas.layout.css'])) {
          unset($css[$key]);
        }
      }
    }
  }
}

/**
 * Implements hook_menu_local_actions_alter().
 */
function bo_menu_local_actions_alter(&$local_actions) {
  if (\Drupal::currentUser()->hasPermission('administer bo bundles')) {
    /** @var \Drupal\bo\Service\BoSettings $boSettings */
    $boSettings = \Drupal::service('bo.settings');
    foreach ($boSettings->getBundleTypes() as $type_id => $type) {
      $local_actions['bo_bundle_action_add_' . $type_id] = [
        'id' => 'bo_bundle_action_add_' . $type_id,
        'route_name' => 'bo.entity.bundle.add_form',
        'route_parameters' => [
          'type' => $type_id,
        ],
        'appears_on' => ['bo.entity.bundle.' . $type_id . '_list'],
        'class' => 'Drupal\bo\Plugin\Menu\LocalAction\BoBundleTypeLocalAction',
        'provider' => 'bo',
      ];
    }
  }
}

/**
 * Implements hook_menu_links_discovered_alter().
 */
function bo_menu_links_discovered_alter(&$links) {
  /** @var \Drupal\bo\Service\BoSettings $boSettings */
  $boSettings = \Drupal::service('bo.settings');

  foreach ($boSettings->getBundleTypes() as $type_id => $type) {
    $links['bo_bundle_' . $type_id . '_list_menu:bo_bundle_elements_list_menu'] = [
      'title' => 'BO ' . $type['plural'],
      'description' => 'Administer BO ' . $type['plural'],
      'route_name' => 'bo.entity.bundle.' . $type_id . '_list',
      'options' => [
        'query' => [
          'type' => $type_id,
        ]
      ],
      'parent' => 'system.admin_structure',
      'provider' => 'bo',
      'id' => 'bo_bundle_' . $type_id . '_list_menu',
    ];
  }
}

function bo_update_8002() {
  $storage_definition = BaseFieldDefinition::create('entity_reference')
    ->setLabel(t('Node added to'))
    ->setDescription(t('The node ID where the BO entity is added to.'))
    ->setSetting('target_type', 'node')
    ->setSetting('handler', 'default');

  \Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition('nid', 'bo', 'bo', $storage_definition);
}

/**
 * @param $form
 * @param FormStateInterface $formState
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function _add_translation_submit($form, FormStateInterface $formState) {
  $google_translate = (bool)$formState->getValue("google_translate");
  if ($google_translate == TRUE) {
    $from_langcode = $formState->getValue("from_langcode");
    $to_langcode =  $formState->getValue("to_langcode");
    $to_path = $formState->getValue("path")[0]["source"];

    /** @var \Drupal\bo\Service\BoTranslate $boTranslate */
    $boTranslate = \Drupal::service('bo.translate');
    $boTranslate->translatePathContent($from_langcode, $to_langcode, $to_path);
  }
}

/**
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $formState
 *
 * @return array
 */
function _bo_entity_form_after_build($form, FormStateInterface $formState) {

  foreach($form as $delta => $element) {
    if ($element['widget'][0]['#type'] == 'text_format') {
      unset($form[$delta]['widget'][0]['format']['help']);
      unset($form[$delta]['widget'][0]['format']['guidelines']);
      $form[$delta]['widget'][0]['format']['#attributes']['class'][] = 'hide';
      $form[$delta]['widget'][0]['format']['#prefix'] = '<div class="hide">';
      $form[$delta]['widget'][0]['format']['#suffix'] = '</div>';
    }
  }

  return $form;
}

/**
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $formState
 *
 * @return array
 */
function _form_after_build($form, FormStateInterface $formState) {
  if (isset($form['actions']['delete'])) {
    $form['actions']['delete']['#options']['attributes']['class'][] = 'button';
  }
  return $form;
}
